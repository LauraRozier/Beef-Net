/*
* Generated by util/mkerr.pl DO NOT EDIT
* Copyright 1995-2019 The OpenSSL Project Authors. All Rights Reserved.
*
* Licensed under the OpenSSL license (the "License").  You may not use
* this file except in compliance with the License.  You can obtain a copy
* in the file LICENSE in the source distribution or at
* https://www.openssl.org/source/license.html
*/
using System;

namespace Beef_Net.OpenSSL
{
	[AlwaysInclude]
	sealed abstract class PEM
	{
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public extern static int ERR_load_PEM_strings();
		
		/*
		 * PEM function codes.
		 */
		public const int F_B2I_DSS                              = 127;
		public const int F_B2I_PVK_BIO                          = 128;
		public const int F_B2I_RSA                              = 129;
		public const int F_CHECK_BITLEN_DSA                     = 130;
		public const int F_CHECK_BITLEN_RSA                     = 131;
		public const int F_D2I_PKCS8PRIVATEKEY_BIO              = 120;
		public const int F_D2I_PKCS8PRIVATEKEY_FP               = 121;
		public const int F_DO_B2I                               = 132;
		public const int F_DO_B2I_BIO                           = 133;
		public const int F_DO_BLOB_HEADER                       = 134;
		public const int F_DO_I2B                               = 146;
		public const int F_DO_PK8PKEY                           = 126;
		public const int F_DO_PK8PKEY_FP                        = 125;
		public const int F_DO_PVK_BODY                          = 135;
		public const int F_DO_PVK_HEADER                        = 136;
		public const int F_GET_HEADER_AND_DATA                  = 143;
		public const int F_GET_NAME                             = 144;
		public const int F_I2B_PVK                              = 137;
		public const int F_I2B_PVK_BIO                          = 138;
		public const int F_LOAD_IV                              = 101;
		public const int F_PEM_ASN1_READ                        = 102;
		public const int F_PEM_ASN1_READ_BIO                    = 103;
		public const int F_PEM_ASN1_WRITE                       = 104;
		public const int F_PEM_ASN1_WRITE_BIO                   = 105;
		public const int F_PEM_DEF_CALLBACK                     = 100;
		public const int F_PEM_DO_HEADER                        = 106;
		public const int F_PEM_GET_EVP_CIPHER_INFO              = 107;
		public const int F_PEM_READ                             = 108;
		public const int F_PEM_READ_BIO                         = 109;
		public const int F_PEM_READ_BIO_DHPARAMS                = 141;
		public const int F_PEM_READ_BIO_EX                      = 145;
		public const int F_PEM_READ_BIO_PARAMETERS              = 140;
		public const int F_PEM_READ_BIO_PRIVATEKEY              = 123;
		public const int F_PEM_READ_DHPARAMS                    = 142;
		public const int F_PEM_READ_PRIVATEKEY                  = 124;
		public const int F_PEM_SIGNFINAL                        = 112;
		public const int F_PEM_WRITE                            = 113;
		public const int F_PEM_WRITE_BIO                        = 114;
		public const int F_PEM_WRITE_BIO_PRIVATEKEY_TRADITIONAL = 147;
		public const int F_PEM_WRITE_PRIVATEKEY                 = 139;
		public const int F_PEM_X509_INFO_READ                   = 115;
		public const int F_PEM_X509_INFO_READ_BIO               = 116;
		public const int F_PEM_X509_INFO_WRITE_BIO              = 117;
		
		/*
		 * PEM reason codes.
		 */
		public const int R_BAD_BASE64_DECODE                    = 100;
		public const int R_BAD_DECRYPT                          = 101;
		public const int R_BAD_END_LINE                         = 102;
		public const int R_BAD_IV_CHARS                         = 103;
		public const int R_BAD_MAGIC_NUMBER                     = 116;
		public const int R_BAD_PASSWORD_READ                    = 104;
		public const int R_BAD_VERSION_NUMBER                   = 117;
		public const int R_BIO_WRITE_FAILURE                    = 118;
		public const int R_CIPHER_IS_NULL                       = 127;
		public const int R_ERROR_CONVERTING_PRIVATE_KEY         = 115;
		public const int R_EXPECTING_PRIVATE_KEY_BLOB           = 119;
		public const int R_EXPECTING_PUBLIC_KEY_BLOB            = 120;
		public const int R_HEADER_TOO_LONG                      = 128;
		public const int R_INCONSISTENT_HEADER                  = 121;
		public const int R_KEYBLOB_HEADER_PARSE_ERROR           = 122;
		public const int R_KEYBLOB_TOO_SHORT                    = 123;
		public const int R_MISSING_DEK_IV                       = 129;
		public const int R_NOT_DEK_INFO                         = 105;
		public const int R_NOT_ENCRYPTED                        = 106;
		public const int R_NOT_PROC_TYPE                        = 107;
		public const int R_NO_START_LINE                        = 108;
		public const int R_PROBLEMS_GETTING_PASSWORD            = 109;
		public const int R_PVK_DATA_TOO_SHORT                   = 124;
		public const int R_PVK_TOO_SHORT                        = 125;
		public const int R_READ_KEY                             = 111;
		public const int R_SHORT_HEADER                         = 112;
		public const int R_UNEXPECTED_DEK_IV                    = 130;
		public const int R_UNSUPPORTED_CIPHER                   = 113;
		public const int R_UNSUPPORTED_ENCRYPTION               = 114;
		public const int R_UNSUPPORTED_KEY_COMPONENTS           = 126;
		public const int R_UNSUPPORTED_PUBLIC_KEY_TYPE          = 110;
		
		public const int BUFSIZE                = 1024;
		
		public const char8* STRING_X509_OLD     = "X509 CERTIFICATE";
		public const char8* STRING_X509         = "CERTIFICATE";
		public const char8* STRING_X509_TRUSTED = "TRUSTED CERTIFICATE";
		public const char8* STRING_X509_REQ_OLD = "NEW CERTIFICATE REQUEST";
		public const char8* STRING_X509_REQ     = "CERTIFICATE REQUEST";
		public const char8* STRING_X509_CRL     = "X509 CRL";
		public const char8* STRING_EVP_PKEY     = "ANY PRIVATE KEY";
		public const char8* STRING_PUBLIC       = "PUBLIC KEY";
		public const char8* STRING_RSA          = "RSA PRIVATE KEY";
		public const char8* STRING_RSA_PUBLIC   = "RSA PUBLIC KEY";
		public const char8* STRING_DSA          = "DSA PRIVATE KEY";
		public const char8* STRING_DSA_PUBLIC   = "DSA PUBLIC KEY";
		public const char8* STRING_PKCS7        = "PKCS7";
		public const char8* STRING_PKCS7_SIGNED = "PKCS #7 SIGNED DATA";
		public const char8* STRING_PKCS8        = "ENCRYPTED PRIVATE KEY";
		public const char8* STRING_PKCS8INF     = "PRIVATE KEY";
		public const char8* STRING_DHPARAMS     = "DH PARAMETERS";
		public const char8* STRING_DHXPARAMS    = "X9.42 DH PARAMETERS";
		public const char8* STRING_SSL_SESSION  = "SSL SESSION PARAMETERS";
		public const char8* STRING_DSAPARAMS    = "DSA PARAMETERS";
		public const char8* STRING_ECDSA_PUBLIC = "ECDSA PUBLIC KEY";
		public const char8* STRING_ECPARAMETERS = "EC PARAMETERS";
		public const char8* STRING_ECPRIVATEKEY = "EC PRIVATE KEY";
		public const char8* STRING_PARAMETERS   = "PARAMETERS";
		public const char8* STRING_CMS          = "CMS";
		
		public const int TYPE_ENCRYPTED         = 10;
		public const int TYPE_MIC_ONLY          = 20;
		public const int TYPE_MIC_CLEAR         = 30;
		public const int TYPE_CLEAR             = 40;

		public function int password_cb(char8* buf, int size, int rwflag, void* userdata);
		
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_get_EVP_CIPHER_INFO")]
		public static extern int get_EVP_CIPHER_INFO(char8* header, EVP.CIPHER_INFO* cipher);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_do_header")]
		public static extern int do_header(EVP.CIPHER_INFO* cipher, uint8* data, int* len, password_cb callback, void* u);

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_read_bio")]
		public static extern int read_bio(BIO.bio_st* bp, char8** name, char8** header, uint8** data, int* len);
		public const int FLAG_SECURE         = 0x1;
		public const int FLAG_EAY_COMPATIBLE = 0x2;
		public const int FLAG_ONLY_B64       = 0x4;
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_read_bio_ex")]
		public static extern int read_bio_ex(BIO.bio_st* bp, char8** name, char8** header, uint8** data, int* len, uint flags);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_bytes_read_bio_secmem")]
		public static extern int bytes_read_bio_secmem(uint8** pdata, int* plen, char8** pnm, char8* name, BIO.bio_st* bp, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_bio")]
		public static extern int write_bio(BIO.bio_st* bp, char8* name, char8* hdr, uint8* data, int len);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_bytes_read_bio")]
		public static extern int bytes_read_bio(uint8** pdata, int* plen, char8** pnm, char8* name, BIO.bio_st* bp, password_cb cb, void* u);

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_ASN1_read_bio")]
		public static extern void* ASN1_read_bio(ASN1.d2i_of_void d2i, char8* name, BIO.bio_st* bp, void** x, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_ASN1_write_bio")]
		public static extern int ASN1_write_bio(ASN1.i2d_of_void i2d, char8* name, BIO.bio_st* bp, void* x, EVP.CIPHER* enc, uint8* kstr, int klen, password_cb cb, void* u);

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_X509_INFO_read_bio")]
		public static extern X509.stack_st_X509_INFO* X509_INFO_read_bio(BIO.bio_st* bp, X509.stack_st_X509_INFO* sk, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_X509_INFO_write_bio")]
		public static extern int X509_INFO_write_bio(BIO.bio_st* bp, X509.INFO* xi, EVP.CIPHER* enc, uint8* kstr, int klen, password_cb cd, void* u);
		
#if !OPENSSL_NO_STDIO
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_read")]
		public static extern int read(Platform.BfpFile* fp, char8** name, char8** header, uint8** data, int* len);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write")]
		public static extern int write(Platform.BfpFile* fp, char8* name, char8* hdr, uint8* data, int len);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_ASN1_read")]
		public static extern void* ASN1_read(ASN1.d2i_of_void d2i, char8* name, Platform.BfpFile* fp, void** x, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_ASN1_write")]
		public static extern int ASN1_write(ASN1.i2d_of_void i2d, char8* name, Platform.BfpFile* fp, void* x, EVP.CIPHER* enc, uint8* kstr, int klen, password_cb callback, void* u);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_X509_INFO_read")]
		public static extern X509.stack_st_X509_INFO* X509_INFO_read(Platform.BfpFile* fp, X509.stack_st_X509_INFO* sk, password_cb cb, void* u);
#endif

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_SignInit")]
		public static extern int SignInit(EVP.MD_CTX* ctx, EVP.MD* type);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_SignUpdate")]
		public static extern int SignUpdate(EVP.MD_CTX* ctx, uint8* d, uint cnt);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_SignFinal")]
		public static extern int SignFinal(EVP.MD_CTX* ctx, uint8* sigret, uint* siglen, EVP.PKEY* pkey);
		
		/* The default pem_password_cb that's used internally */
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_def_callback")]
		public static extern int def_callback(char8* buf, int num, int rwflag, void* userdata);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_proc_type")]
		public static extern void proc_type(char8* buf, int type);
		/*
		DECLARE_PEM_rw(X509, X509)
		DECLARE_PEM_rw(X509_AUX, X509)
		DECLARE_PEM_rw(X509_REQ, X509_REQ)
		DECLARE_PEM_write(X509_REQ_NEW, X509_REQ)
		DECLARE_PEM_rw(X509_CRL, X509_CRL)
		DECLARE_PEM_rw(PKCS7, PKCS7)
		DECLARE_PEM_rw(NETSCAPE_CERT_SEQUENCE, NETSCAPE_CERT_SEQUENCE)
		DECLARE_PEM_rw(PKCS8, X509_SIG)
		DECLARE_PEM_rw(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO)
#if !OPENSSL_NO_RSA
		DECLARE_PEM_rw_cb(RSAPrivateKey, RSA)
		DECLARE_PEM_rw_const(RSAPublicKey, RSA)
		DECLARE_PEM_rw(RSA_PUBKEY, RSA)
#endif
#if !OPENSSL_NO_DSA
		DECLARE_PEM_rw_cb(DSAPrivateKey, DSA)
		DECLARE_PEM_rw(DSA_PUBKEY, DSA)
		DECLARE_PEM_rw_const(DSAparams, DSA)
#endif
#if !OPENSSL_NO_EC
		DECLARE_PEM_rw_const(ECPKParameters, EC_GROUP)
		DECLARE_PEM_rw_cb(ECPrivateKey, EC_KEY)
		DECLARE_PEM_rw(EC_PUBKEY, EC_KEY)
#endif
#if !OPENSSL_NO_DH
		DECLARE_PEM_rw_const(DHparams, DH)
		DECLARE_PEM_write_const(DHxparams, DH)
#endif
		DECLARE_PEM_rw_cb(PrivateKey, EVP_PKEY)
		DECLARE_PEM_rw(PUBKEY, EVP_PKEY)
		*/

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_bio_PrivateKey_traditional")]
		public static extern int write_bio_PrivateKey_traditional(BIO.bio_st* bp, EVP.PKEY* x, EVP.CIPHER* enc, uint8* kstr, int klen, password_cb cb, void* u);

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_bio_PKCS8PrivateKey_nid")]
		public static extern int write_bio_PKCS8PrivateKey_nid(BIO.bio_st* bp, EVP.PKEY* x, int nid, char8* kstr, int klen, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_bio_PKCS8PrivateKey")]
		public static extern int write_bio_PKCS8PrivateKey(BIO.bio_st* bp, EVP.PKEY* x, EVP.CIPHER* enc, char8* kstr, int klen, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern int i2d_PKCS8PrivateKey_bio(BIO.bio_st* bp, EVP.PKEY* x, EVP.CIPHER* enc, char8* kstr, int klen, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern int i2d_PKCS8PrivateKey_nid_bio(BIO.bio_st* bp, EVP.PKEY* x, int nid, char8* kstr, int klen, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern EVP.PKEY* d2i_PKCS8PrivateKey_bio(BIO.bio_st* bp, EVP.PKEY** x, password_cb cb, void* u);

#if !OPENSSL_NO_STDIO
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern int i2d_PKCS8PrivateKey_fp(Platform.BfpFile* fp, EVP.PKEY* x, EVP.CIPHER* enc, char8* kstr, int klen, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern int i2d_PKCS8PrivateKey_nid_fp(Platform.BfpFile* fp, EVP.PKEY* x, int nid, char8* kstr, int klen, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_PKCS8PrivateKey_nid")]
		public static extern int write_PKCS8PrivateKey_nid(Platform.BfpFile* fp, EVP.PKEY* x, int nid, char8* kstr, int klen, password_cb cb, void* u);

		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern EVP.PKEY* d2i_PKCS8PrivateKey_fp(Platform.BfpFile* fp, EVP.PKEY** x, password_cb cb, void* u);

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_PKCS8PrivateKey")]
		public static extern int write_PKCS8PrivateKey(Platform.BfpFile* fp, EVP.PKEY* x, EVP.CIPHER* enc, char8* kstr, int klen, password_cb cd, void* u);
#endif
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_read_bio_Parameters")]
		public static extern EVP.PKEY* read_bio_Parameters(BIO.bio_st* bp, EVP.PKEY** x);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_bio_Parameters")]
		public static extern int write_bio_Parameters(BIO.bio_st* bp, EVP.PKEY* x);

#if !OPENSSL_NO_DSA
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern EVP.PKEY* b2i_PrivateKey(uint8** inVal, int length);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern EVP.PKEY* b2i_PublicKey(uint8** inVal, int length);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern EVP.PKEY* b2i_PrivateKey_bio(BIO.bio_st* inVal);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern EVP.PKEY* b2i_PublicKey_bio(BIO.bio_st* inVal);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern int i2b_PrivateKey_bio(BIO.bio_st* outVal, EVP.PKEY* pk);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern int i2b_PublicKey_bio(BIO.bio_st* outVal, EVP.PKEY* pk);
	#if !OPENSSL_NO_RC4
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern EVP.PKEY* b2i_PVK_bio(BIO.bio_st* inVal, password_cb cb, void* u);
		[Import(OPENSSL_LIB_CRYPTO), CLink]
		public static extern int i2b_PVK_bio(BIO.bio_st* outVal, EVP.PKEY* pk, int enclevel, password_cb cb, void* u);
	#endif
#endif

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_bio_CMS_stream")]
		public static extern int write_bio_CMS_stream(BIO.bio_st* outVal, CMS.ContentInfo* cms, BIO.bio_st* inVal, int flags);
		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_bio_ASN1_stream")]
		public static extern int write_bio_ASN1_stream(BIO.bio_st* outVal, ASN1.VALUE* val, BIO.bio_st* inVal, int flags, char8* hdr, ASN1.ITEM* it);
		
		public const char8* STRING_OCSP_REQUEST  = "OCSP REQUEST";
		public const char8* STRING_OCSP_RESPONSE = "OCSP RESPONSE";
		
		[Inline]
		public static OCSP.REQUEST* read_bio_OCSP_REQUEST(BIO.bio_st* bp, OCSP.REQUEST** x, password_cb cb)
		{
			void* internalF(void** a, uint8** outVal, int len) => (void*)OCSP.d2i_OCSP_REQUEST((OCSP.REQUEST**)a, outVal, len);
			return (OCSP.REQUEST*)ASN1_read_bio(=> internalF, STRING_OCSP_REQUEST, bp, (void**)x, cb, null);
		}
		
		[Inline]
		public static OCSP.REQUEST* read_bio_OCSP_RESPONSE(BIO.bio_st* bp, OCSP.RESPONSE** x, password_cb cb)
		{
			void* internalF(void** a, uint8** outVal, int len) => (void*)OCSP.d2i_OCSP_RESPONSE((OCSP.RESPONSE**)a, outVal, len);
			return (OCSP.REQUEST*)ASN1_read_bio(=> internalF, STRING_OCSP_RESPONSE, bp, (void**)x, cb, null);
		}
		
		[Inline]
		public static int write_bio_OCSP_REQUEST(BIO.bio_st* bp, OCSP.REQUEST* o)
		{
			int internalF(void* a, uint8** outVal) => OCSP.i2d_OCSP_REQUEST((OCSP.REQUEST*)a, outVal);
			return ASN1_write_bio(=> internalF, STRING_OCSP_REQUEST, bp, (char8*)o, null, null, 0, null, null);
		}
		
		[Inline]
		public static int write_bio_OCSP_RESPONSE(BIO.bio_st* bp, OCSP.RESPONSE* o)
		{
			int internalF(void* a, uint8** outVal) => OCSP.i2d_OCSP_RESPONSE((OCSP.RESPONSE*)a, outVal);
			return ASN1_write_bio(=> internalF, STRING_OCSP_RESPONSE, bp, (char8*)o, null, null, 0, null, null);
		}

		[Import(OPENSSL_LIB_CRYPTO), LinkName("PEM_write_bio_PKCS7_stream")]
		public extern static int write_bio_PKCS7_stream(BIO.bio_st* outVal, PKCS7.pkcs7_st* p7, BIO.bio_st* inVal, int flags);

		/*
		** MOVED for convenience
		** libssl-1_1.dll
		**    22   15 00001EDD PEM_read_SSL_SESSION
		**    23   16 00001DE3 PEM_read_bio_SSL_SESSION
		**    24   17 000010B4 PEM_write_SSL_SESSION
		**    25   18 0000205E PEM_write_bio_SSL_SESSION
		*/
		[Import(OPENSSL_LIB_SSL), LinkName("PEM_read_bio_SSL_SESSION")]
		public static extern SSL.SESSION* read_bio_SSL_SESSION(BIO.bio_st* bp, SSL.SESSION** x, password_cb cb, void* u);
		[Import(OPENSSL_LIB_SSL), LinkName("PEM_read_SSL_SESSION")]
		public static extern SSL.SESSION* read_SSL_SESSION(Platform.BfpFile* fp, SSL.SESSION** x, password_cb cb, void* u);
		[Import(OPENSSL_LIB_SSL), LinkName("PEM_write_bio_SSL_SESSION")]
		public static extern int write_bio_SSL_SESSION(BIO.bio_st* bp, SSL.SESSION* x);
		[Import(OPENSSL_LIB_SSL), LinkName("PEM_write_SSL_SESSION")]
		public static extern int write_SSL_SESSION(Platform.BfpFile* fp, SSL.SESSION* x);
	}
}
