/*
* Generated by util/mkerr.pl DO NOT EDIT
* Copyright 1995-2019 The OpenSSL Project Authors. All Rights Reserved.
*
* Licensed under the OpenSSL license (the "License").  You may not use
* this file except in compliance with the License.  You can obtain a copy
* in the file LICENSE in the source distribution or at
* https://www.openssl.org/source/license.html
*/
using System;

namespace Beef_Net.OpenSSL
{
	[AlwaysInclude]
	sealed abstract class CMS
	{
#if !OPENSSL_NO_CMS
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			CLink
		]
		public extern static int ERR_load_CMS_strings();
		
		/*
		 * CMS function codes.
		 */
		public const int F_CHECK_CONTENT                             = 99;
		public const int F_CMS_ADD0_CERT                             = 164;
		public const int F_CMS_ADD0_RECIPIENT_KEY                    = 100;
		public const int F_CMS_ADD0_RECIPIENT_PASSWORD               = 165;
		public const int F_CMS_ADD1_RECEIPTREQUEST                   = 158;
		public const int F_CMS_ADD1_RECIPIENT_CERT                   = 101;
		public const int F_CMS_ADD1_SIGNER                           = 102;
		public const int F_CMS_ADD1_SIGNINGTIME                      = 103;
		public const int F_CMS_COMPRESS                              = 104;
		public const int F_CMS_COMPRESSEDDATA_CREATE                 = 105;
		public const int F_CMS_COMPRESSEDDATA_INIT_BIO               = 106;
		public const int F_CMS_COPY_CONTENT                          = 107;
		public const int F_CMS_COPY_MESSAGEDIGEST                    = 108;
		public const int F_CMS_DATA                                  = 109;
		public const int F_CMS_DATAFINAL                             = 110;
		public const int F_CMS_DATAINIT                              = 111;
		public const int F_CMS_DECRYPT                               = 112;
		public const int F_CMS_DECRYPT_SET1_KEY                      = 113;
		public const int F_CMS_DECRYPT_SET1_PASSWORD                 = 166;
		public const int F_CMS_DECRYPT_SET1_PKEY                     = 114;
		public const int F_CMS_DIGESTALGORITHM_FIND_CTX              = 115;
		public const int F_CMS_DIGESTALGORITHM_INIT_BIO              = 116;
		public const int F_CMS_DIGESTEDDATA_DO_FINAL                 = 117;
		public const int F_CMS_DIGEST_VERIFY                         = 118;
		public const int F_CMS_ENCODE_RECEIPT                        = 161;
		public const int F_CMS_ENCRYPT                               = 119;
		public const int F_CMS_ENCRYPTEDCONTENT_INIT                 = 179;
		public const int F_CMS_ENCRYPTEDCONTENT_INIT_BIO             = 120;
		public const int F_CMS_ENCRYPTEDDATA_DECRYPT                 = 121;
		public const int F_CMS_ENCRYPTEDDATA_ENCRYPT                 = 122;
		public const int F_CMS_ENCRYPTEDDATA_SET1_KEY                = 123;
		public const int F_CMS_ENVELOPEDDATA_CREATE                  = 124;
		public const int F_CMS_ENVELOPEDDATA_INIT_BIO                = 125;
		public const int F_CMS_ENVELOPED_DATA_INIT                   = 126;
		public const int F_CMS_ENV_ASN1_CTRL                         = 171;
		public const int F_CMS_FINAL                                 = 127;
		public const int F_CMS_GET0_CERTIFICATE_CHOICES              = 128;
		public const int F_CMS_GET0_CONTENT                          = 129;
		public const int F_CMS_GET0_ECONTENT_TYPE                    = 130;
		public const int F_CMS_GET0_ENVELOPED                        = 131;
		public const int F_CMS_GET0_REVOCATION_CHOICES               = 132;
		public const int F_CMS_GET0_SIGNED                           = 133;
		public const int F_CMS_MSGSIGDIGEST_ADD1                     = 162;
		public const int F_CMS_RECEIPTREQUEST_CREATE0                = 159;
		public const int F_CMS_RECEIPT_VERIFY                        = 160;
		public const int F_CMS_RECIPIENTINFO_DECRYPT                 = 134;
		public const int F_CMS_RECIPIENTINFO_ENCRYPT                 = 169;
		public const int F_CMS_RECIPIENTINFO_KARI_ENCRYPT            = 178;
		public const int F_CMS_RECIPIENTINFO_KARI_GET0_ALG           = 175;
		public const int F_CMS_RECIPIENTINFO_KARI_GET0_ORIG_ID       = 173;
		public const int F_CMS_RECIPIENTINFO_KARI_GET0_REKS          = 172;
		public const int F_CMS_RECIPIENTINFO_KARI_ORIG_ID_CMP        = 174;
		public const int F_CMS_RECIPIENTINFO_KEKRI_DECRYPT           = 135;
		public const int F_CMS_RECIPIENTINFO_KEKRI_ENCRYPT           = 136;
		public const int F_CMS_RECIPIENTINFO_KEKRI_GET0_ID           = 137;
		public const int F_CMS_RECIPIENTINFO_KEKRI_ID_CMP            = 138;
		public const int F_CMS_RECIPIENTINFO_KTRI_CERT_CMP           = 139;
		public const int F_CMS_RECIPIENTINFO_KTRI_DECRYPT            = 140;
		public const int F_CMS_RECIPIENTINFO_KTRI_ENCRYPT            = 141;
		public const int F_CMS_RECIPIENTINFO_KTRI_GET0_ALGS          = 142;
		public const int F_CMS_RECIPIENTINFO_KTRI_GET0_SIGNER_ID     = 143;
		public const int F_CMS_RECIPIENTINFO_PWRI_CRYPT              = 167;
		public const int F_CMS_RECIPIENTINFO_SET0_KEY                = 144;
		public const int F_CMS_RECIPIENTINFO_SET0_PASSWORD           = 168;
		public const int F_CMS_RECIPIENTINFO_SET0_PKEY               = 145;
		public const int F_CMS_SD_ASN1_CTRL                          = 170;
		public const int F_CMS_SET1_IAS                              = 176;
		public const int F_CMS_SET1_KEYID                            = 177;
		public const int F_CMS_SET1_SIGNERIDENTIFIER                 = 146;
		public const int F_CMS_SET_DETACHED                          = 147;
		public const int F_CMS_SIGN                                  = 148;
		public const int F_CMS_SIGNED_DATA_INIT                      = 149;
		public const int F_CMS_SIGNERINFO_CONTENT_SIGN               = 150;
		public const int F_CMS_SIGNERINFO_SIGN                       = 151;
		public const int F_CMS_SIGNERINFO_VERIFY                     = 152;
		public const int F_CMS_SIGNERINFO_VERIFY_CERT                = 153;
		public const int F_CMS_SIGNERINFO_VERIFY_CONTENT             = 154;
		public const int F_CMS_SIGN_RECEIPT                          = 163;
		public const int F_CMS_SI_CHECK_ATTRIBUTES                   = 183;
		public const int F_CMS_STREAM                                = 155;
		public const int F_CMS_UNCOMPRESS                            = 156;
		public const int F_CMS_VERIFY                                = 157;
		public const int F_KEK_UNWRAP_KEY                            = 180;
		
		/*
		 * CMS reason codes.
		 */
		public const int R_ADD_SIGNER_ERROR                          = 99;
		public const int R_ATTRIBUTE_ERROR                           = 161;
		public const int R_CERTIFICATE_ALREADY_PRESENT               = 175;
		public const int R_CERTIFICATE_HAS_NO_KEYID                  = 160;
		public const int R_CERTIFICATE_VERIFY_ERROR                  = 100;
		public const int R_CIPHER_INITIALISATION_ERROR               = 101;
		public const int R_CIPHER_PARAMETER_INITIALISATION_ERROR     = 102;
		public const int R_CMS_DATAFINAL_ERROR                       = 103;
		public const int R_CMS_LIB                                   = 104;
		public const int R_CONTENTIDENTIFIER_MISMATCH                = 170;
		public const int R_CONTENT_NOT_FOUND                         = 105;
		public const int R_CONTENT_TYPE_MISMATCH                     = 171;
		public const int R_CONTENT_TYPE_NOT_COMPRESSED_DATA          = 106;
		public const int R_CONTENT_TYPE_NOT_ENVELOPED_DATA           = 107;
		public const int R_CONTENT_TYPE_NOT_SIGNED_DATA              = 108;
		public const int R_CONTENT_VERIFY_ERROR                      = 109;
		public const int R_CTRL_ERROR                                = 110;
		public const int R_CTRL_FAILURE                              = 111;
		public const int R_DECRYPT_ERROR                             = 112;
		public const int R_ERROR_GETTING_PUBLIC_KEY                  = 113;
		public const int R_ERROR_READING_MESSAGEDIGEST_ATTRIBUTE     = 114;
		public const int R_ERROR_SETTING_KEY                         = 115;
		public const int R_ERROR_SETTING_RECIPIENTINFO               = 116;
		public const int R_INVALID_ENCRYPTED_KEY_LENGTH              = 117;
		public const int R_INVALID_KEY_ENCRYPTION_PARAMETER          = 176;
		public const int R_INVALID_KEY_LENGTH                        = 118;
		public const int R_MD_BIO_INIT_ERROR                         = 119;
		public const int R_MESSAGEDIGEST_ATTRIBUTE_WRONG_LENGTH      = 120;
		public const int R_MESSAGEDIGEST_WRONG_LENGTH                = 121;
		public const int R_MSGSIGDIGEST_ERROR                        = 172;
		public const int R_MSGSIGDIGEST_VERIFICATION_FAILURE         = 162;
		public const int R_MSGSIGDIGEST_WRONG_LENGTH                 = 163;
		public const int R_NEED_ONE_SIGNER                           = 164;
		public const int R_NOT_A_SIGNED_RECEIPT                      = 165;
		public const int R_NOT_ENCRYPTED_DATA                        = 122;
		public const int R_NOT_KEK                                   = 123;
		public const int R_NOT_KEY_AGREEMENT                         = 181;
		public const int R_NOT_KEY_TRANSPORT                         = 124;
		public const int R_NOT_PWRI                                  = 177;
		public const int R_NOT_SUPPORTED_FOR_THIS_KEY_TYPE           = 125;
		public const int R_NO_CIPHER                                 = 126;
		public const int R_NO_CONTENT                                = 127;
		public const int R_NO_CONTENT_TYPE                           = 173;
		public const int R_NO_DEFAULT_DIGEST                         = 128;
		public const int R_NO_DIGEST_SET                             = 129;
		public const int R_NO_KEY                                    = 130;
		public const int R_NO_KEY_OR_CERT                            = 174;
		public const int R_NO_MATCHING_DIGEST                        = 131;
		public const int R_NO_MATCHING_RECIPIENT                     = 132;
		public const int R_NO_MATCHING_SIGNATURE                     = 166;
		public const int R_NO_MSGSIGDIGEST                           = 167;
		public const int R_NO_PASSWORD                               = 178;
		public const int R_NO_PRIVATE_KEY                            = 133;
		public const int R_NO_PUBLIC_KEY                             = 134;
		public const int R_NO_RECEIPT_REQUEST                        = 168;
		public const int R_NO_SIGNERS                                = 135;
		public const int R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE    = 136;
		public const int R_RECEIPT_DECODE_ERROR                      = 169;
		public const int R_RECIPIENT_ERROR                           = 137;
		public const int R_SIGNER_CERTIFICATE_NOT_FOUND              = 138;
		public const int R_SIGNFINAL_ERROR                           = 139;
		public const int R_SMIME_TEXT_ERROR                          = 140;
		public const int R_STORE_INIT_ERROR                          = 141;
		public const int R_TYPE_NOT_COMPRESSED_DATA                  = 142;
		public const int R_TYPE_NOT_DATA                             = 143;
		public const int R_TYPE_NOT_DIGESTED_DATA                    = 144;
		public const int R_TYPE_NOT_ENCRYPTED_DATA                   = 145;
		public const int R_TYPE_NOT_ENVELOPED_DATA                   = 146;
		public const int R_UNABLE_TO_FINALIZE_CONTEXT                = 147;
		public const int R_UNKNOWN_CIPHER                            = 148;
		public const int R_UNKNOWN_DIGEST_ALGORITHM                  = 149;
		public const int R_UNKNOWN_ID                                = 150;
		public const int R_UNSUPPORTED_COMPRESSION_ALGORITHM         = 151;
		public const int R_UNSUPPORTED_CONTENT_TYPE                  = 152;
		public const int R_UNSUPPORTED_KEK_ALGORITHM                 = 153;
		public const int R_UNSUPPORTED_KEY_ENCRYPTION_ALGORITHM      = 179;
		public const int R_UNSUPPORTED_RECIPIENTINFO_TYPE            = 155;
		public const int R_UNSUPPORTED_RECIPIENT_TYPE                = 154;
		public const int R_UNSUPPORTED_TYPE                          = 156;
		public const int R_UNWRAP_ERROR                              = 157;
		public const int R_UNWRAP_FAILURE                            = 180;
		public const int R_VERIFICATION_FAILURE                      = 158;
		public const int R_WRAP_ERROR                                = 159;

		public struct SignedData {}
		public struct SignerIdentifier {}
		public struct EnvelopedData {}
		public struct DigestedData {}
		public struct EncryptedData {}
		public struct AuthenticatedData {}
		public struct CompressedData {}
		public struct OtherRevocationInfoFormat {}
		public struct KeyTransRecipientInfo {}
		public struct KeyAgreeRecipientInfo {}
		public struct KEKRecipientInfo {}
		public struct PasswordRecipientInfo {}
		public struct OtherRecipientInfo {}
		public struct ReceiptsFrom {}
		public struct KeyAgreeRecipientIdentifier {}
		public struct OtherCertificateFormat {}
		
		public struct stack_st_CMS_RecipientEncryptedKey {}
		public struct stack_st_CMS_RecipientInfo {}
		public struct stack_st_CMS_SignerInfo {}

		[CRepr]
		public struct ContentInfo_st
		{
		    public ASN1.OBJECT* contentType;
		    public d_struct d;

			[CRepr, Union]
			public struct d_struct
			{
		        public ASN1.OCTET_STRING* data;
		        public SignedData* signedData;
		        public EnvelopedData* envelopedData;
		        public DigestedData* digestedData;
		        public EncryptedData* encryptedData;
		        public AuthenticatedData* authenticatedData;
		        public CompressedData* compressedData;
		        public ASN1.TYPE* other;
		        /* Other types ... */
		        public void* otherData;
			}
		}
		public typealias ContentInfo = ContentInfo_st;
		
		[CRepr]
		public struct SignerInfo_st
		{
		    public int32 version;
		    public SignerIdentifier* sid;
		    public X509.ALGOR* digestAlgorithm;
		    public X509.stack_st_X509_ATTRIBUTE* signedAttrs;
		    public X509.ALGOR* signatureAlgorithm;
		    public ASN1.OCTET_STRING* signature;
		    public X509.stack_st_X509_ATTRIBUTE* unsignedAttrs;
		    /* Signing certificate and key */
		    public X509.x509_st* signer;
		    public EVP.PKEY* pkey;
		    /* Digest and public key context for alternative parameters */
		    public EVP.MD_CTX* mctx;
		    public EVP.PKEY_CTX* pctx;
		}
		public typealias SignerInfo = SignerInfo_st;
		
		[CRepr]
		public struct CertificateChoices_st
		{
		    public int type;
		    public d_struct d;

			[CRepr, Union]
			public struct d_struct
			{
		        public X509.x509_st* certificate;
		        public ASN1.STRING* extendedCertificate; /* Obsolete */
		        public ASN1.STRING* v1AttrCert;          /* Left encoded for now */
		        public ASN1.STRING* v2AttrCert;          /* Left encoded for now */
		        public OtherCertificateFormat* other;
			}
		}
		public typealias CertificateChoices = CertificateChoices_st;

		[CRepr]
		public struct RevocationInfoChoice_st
		{
		    public int type;
		    public d_struct d;

			[CRepr, Union]
			public struct d_struct
			{
		        public X509.CRL* crl;
		        public OtherRevocationInfoFormat* other;
			}
		}
		public typealias RevocationInfoChoice = RevocationInfoChoice_st;

		[CRepr]
		public struct RecipientInfo_st
		{
		    public int type;
		    public d_struct d;

			[CRepr, Union]
			public struct d_struct
			{
		        public KeyTransRecipientInfo* ktri;
		        public KeyAgreeRecipientInfo* kari;
		        public KEKRecipientInfo* kekri;
		        public PasswordRecipientInfo* pwri;
		        public OtherRecipientInfo* ori;
			}
		}
		public typealias RecipientInfo = RecipientInfo_st;

		[CRepr]
		public struct ReceiptRequest_st
		{
		    public ASN1.OCTET_STRING* signedContentIdentifier;
		    public ReceiptsFrom* receiptsFrom;
		    public X509v3.stack_st_GENERAL_NAMES* receiptsTo;
		}
		public typealias ReceiptRequest = ReceiptRequest_st;

		[CRepr]
		public struct Receipt_st
		{
		    public int32 version;
		    public ASN1.OBJECT* contentType;
		    public ASN1.OCTET_STRING* signedContentIdentifier;
		    public ASN1.OCTET_STRING* originatorSignatureValue;
		}
		public typealias Receipt = Receipt_st;

		[CRepr]
		public struct RecipientEncryptedKey_st
		{
		    public KeyAgreeRecipientIdentifier* rid;
		    public ASN1.OCTET_STRING* encryptedKey;
		    /* Public key associated with this recipient */
		    public EVP.PKEY* pkey;
		}
		public typealias RecipientEncryptedKey = RecipientEncryptedKey_st;

		[CRepr]
		public struct OtherKeyAttribute_st
		{
		    public ASN1.OBJECT* keyAttrId;
		    public ASN1.TYPE* keyAttr;
		}
		public typealias OtherKeyAttribute = OtherKeyAttribute_st;

		public const int SIGNERINFO_ISSUER_SERIAL = 0;
		public const int SIGNERINFO_KEYIDENTIFIER = 1;
		
		public const int RECIPINFO_NONE  = -1;
		public const int RECIPINFO_TRANS = 0;
		public const int RECIPINFO_AGREE = 1;
		public const int RECIPINFO_KEK   = 2;
		public const int RECIPINFO_PASS  = 3;
		public const int RECIPINFO_OTHER = 4;
		
		/* S/MIME related flags */
		
		public const int TEXT                  = 0x1;
		public const int NOCERTS               = 0x2;
		public const int NO_CONTENT_VERIFY     = 0x4;
		public const int NO_ATTR_VERIFY        = 0x8;
		public const int NOSIGS                = NO_CONTENT_VERIFY | NO_ATTR_VERIFY;
		public const int NOINTERN              = 0x10;
		public const int NO_SIGNER_CERT_VERIFY = 0x20;
		public const int NOVERIFY              = 0x20;
		public const int DETACHED              = 0x40;
		public const int BINARY                = 0x80;
		public const int NOATTR                = 0x100;
		public const int NOSMIMECAP            = 0x200;
		public const int NOOLDMIMETYPE         = 0x400;
		public const int CRLFEOL               = 0x800;
		public const int STREAM                = 0x1000;
		public const int NOCRL                 = 0x2000;
		public const int PARTIAL               = 0x4000;
		public const int REUSE_DIGEST          = 0x8000;
		public const int USE_KEYID             = 0x10000;
		public const int DEBUG_DECRYPT         = 0x20000;
		public const int KEY_PARAM             = 0x40000;
		public const int ASCIICRLF             = 0x80000;
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get0_type")
		]
		public extern static ASN1.OBJECT* get0_type(ContentInfo* cms);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_dataInit")
		]
		public extern static BIO.bio_st* dataInit(ContentInfo* cms, BIO.bio_st* icont);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_dataFinal")
		]
		public extern static int dataFinal(ContentInfo* cms, BIO.bio_st* bio);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get0_content")
		]
		public extern static ASN1.OCTET_STRING** get0_content(ContentInfo* cms);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_is_detached")
		]
		public extern static int is_detached(ContentInfo* cms);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_set_detached")
		]
		public extern static int set_detached(ContentInfo* cms, int detached);

		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_stream")
		]
		public extern static int stream(uint8*** boundary, ContentInfo* cms);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			CLink
		]
		public extern static ContentInfo* d2i_CMS_bio(BIO.bio_st* bp, ContentInfo* *cms);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			CLink
		]
		public extern static int i2d_CMS_bio(BIO.bio_st* bp, ContentInfo* cms);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			CLink
		]
		public extern static int i2d_CMS_bio_stream(BIO.bio_st* outVal, ContentInfo* cms, BIO.bio_st* inVal, int flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_final")
		]
		public extern static int final(ContentInfo* cms, BIO.bio_st* data, BIO.bio_st* dcont, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_sign")
		]
		public extern static ContentInfo* sign(X509.x509_st* signcert, EVP.PKEY* pkey, X509.stack_st_X509* certs, BIO.bio_st* data, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_sign_receipt")
		]
		public extern static ContentInfo* sign_receipt(SignerInfo* si, X509.x509_st* signcert, EVP.PKEY* pkey, X509.stack_st_X509* certs, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_data")
		]
		public extern static int data(ContentInfo* cms, BIO.bio_st* outVal, uint flags);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_data_create")
		]
		public extern static ContentInfo* data_create(BIO.bio_st* inVal, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_digest_verify")
		]
		public extern static int digest_verify(ContentInfo* cms, BIO.bio_st* dcont, BIO.bio_st* outVal, uint flags);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_digest_create")
		]
		public extern static ContentInfo* digest_create(BIO.bio_st* inVal, EVP.MD* md, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_EncryptedData_decrypt")
		]
		public extern static int EncryptedData_decrypt(ContentInfo* cms, uint8* key, uint keylen, BIO.bio_st* dcont, BIO.bio_st* outVal, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_EncryptedData_encrypt")
		]
		public extern static ContentInfo* EncryptedData_encrypt(BIO.bio_st* inVal, EVP.CIPHER* cipher, uint8* key, uint keylen, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_EncryptedData_set1_key")
		]
		public extern static int EncryptedData_set1_key(ContentInfo* cms, EVP.CIPHER* ciph, uint8* key, uint keylen);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_verify")
		]
		public extern static int verify(ContentInfo* cms, X509.stack_st_X509* certs, X509.STORE* store, BIO.bio_st* dcont, BIO.bio_st* outVal, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_verify_receipt")
		]
		public extern static int verify_receipt(ContentInfo* rcms, ContentInfo* ocms, X509.stack_st_X509* certs, X509.STORE* store, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get0_signers")
		]
		public extern static X509.stack_st_X509* get0_signers(ContentInfo* cms);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_encrypt")
		]
		public extern static ContentInfo* encrypt(X509.stack_st_X509* certs, BIO.bio_st* inVal, EVP.CIPHER* cipher, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_decrypt")
		]
		public extern static int decrypt(ContentInfo* cms, EVP.PKEY* pkey, X509.x509_st* cert, BIO.bio_st* dcont, BIO.bio_st* outVal, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_decrypt_set1_pkey")
		]
		public extern static int decrypt_set1_pkey(ContentInfo* cms, EVP.PKEY* pk, X509.x509_st* cert);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_decrypt_set1_key")
		]
		public extern static int decrypt_set1_key(ContentInfo* cms, uint8* key, uint keylen, uint8* id, uint idlen);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_decrypt_set1_password")
		]
		public extern static int decrypt_set1_password(ContentInfo* cms, uint8* pass, int64 passlen);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get0_RecipientInfos")
		]
		public extern static stack_st_CMS_RecipientInfo* get0_RecipientInfos(ContentInfo* cms);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_type")
		]
		public extern static int RecipientInfo_type(RecipientInfo* ri);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_get0_pkey_ctx")
		]
		public extern static EVP.PKEY_CTX* RecipientInfo_get0_pkey_ctx(RecipientInfo* ri);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_EnvelopedData_create")
		]
		public extern static ContentInfo* EnvelopedData_create(EVP.CIPHER* cipher);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add1_recipient_cert")
		]
		public extern static RecipientInfo* add1_recipient_cert(ContentInfo* cms, X509.x509_st* recip, uint flags);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_set0_pkey")
		]
		public extern static int RecipientInfo_set0_pkey(RecipientInfo* ri, EVP.PKEY* pkey);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_ktri_cert_cmp")
		]
		public extern static int RecipientInfo_ktri_cert_cmp(RecipientInfo* ri, X509.x509_st* cert);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_ktri_get0_algs")
		]
		public extern static int RecipientInfo_ktri_get0_algs(RecipientInfo* ri, EVP.PKEY** pk, X509.x509_st** recip, X509.ALGOR** palg);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_ktri_get0_signer_id")
		]
		public extern static int RecipientInfo_ktri_get0_signer_id(RecipientInfo* ri, ASN1.OCTET_STRING** keyid, X509.NAME** issuer, ASN1.INTEGER** sno);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add0_recipient_key")
		]
		public extern static RecipientInfo* add0_recipient_key(ContentInfo* cms, int nid, uint8* key, uint keylen, uint8* id, uint idlen, ASN1.GENERALIZEDTIME* date, ASN1.OBJECT* otherTypeId, ASN1.TYPE* otherType);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kekri_get0_id")
		]
		public extern static int RecipientInfo_kekri_get0_id(RecipientInfo* ri, X509.ALGOR** palg, ASN1.OCTET_STRING** pid, ASN1.GENERALIZEDTIME** pdate, ASN1.OBJECT** potherid, ASN1.TYPE** pothertype);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_set0_key")
		]
		public extern static int RecipientInfo_set0_key(RecipientInfo* ri, uint8* key, uint keylen);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kekri_id_cmp")
		]
		public extern static int RecipientInfo_kekri_id_cmp(RecipientInfo* ri, uint8* id, uint idlen);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_set0_password")
		]
		public extern static int RecipientInfo_set0_password(RecipientInfo* ri, uint8* pass, int64 passlen);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add0_recipient_password")
		]
		public extern static RecipientInfo* add0_recipient_password(ContentInfo* cms, int iter, int wrap_nid, int pbe_nid, uint8* pass, int64 passlen, EVP.CIPHER* kekciph);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_decrypt")
		]
		public extern static int RecipientInfo_decrypt(ContentInfo* cms, RecipientInfo* ri);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_encrypt")
		]
		public extern static int RecipientInfo_encrypt(ContentInfo* cms, RecipientInfo* ri);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_uncompress")
		]
		public extern static int uncompress(ContentInfo* cms, BIO.bio_st* dcont, BIO.bio_st* outVal, uint flags);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_compress")
		]
		public extern static ContentInfo* compress(BIO.bio_st* inVal, int comp_nid, uint flags);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_set1_eContentType")
		]
		public extern static int set1_eContentType(ContentInfo* cms, ASN1.OBJECT* oid);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get0_eContentType")
		]
		public extern static ASN1.OBJECT* get0_eContentType(ContentInfo* cms);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add0_CertificateChoices")
		]
		public extern static CertificateChoices* add0_CertificateChoices(ContentInfo* cms);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add0_cert")
		]
		public extern static int add0_cert(ContentInfo* cms, X509.x509_st* cert);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add1_cert")
		]
		public extern static int add1_cert(ContentInfo* cms, X509.x509_st* cert);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get1_certs")
		]
		public extern static X509.stack_st_X509* get1_certs(ContentInfo* cms);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add0_RevocationInfoChoice")
		]
		public extern static RevocationInfoChoice* add0_RevocationInfoChoice(ContentInfo* cms);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add0_crl")
		]
		public extern static int add0_crl(ContentInfo* cms, X509.CRL* crl);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add1_crl")
		]
		public extern static int add1_crl(ContentInfo* cms, X509.CRL* crl);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get1_crls")
		]
		public extern static X509.stack_st_X509_CRL* get1_crls(ContentInfo* cms);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignedData_init")
		]
		public extern static int SignedData_init(ContentInfo* cms);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add1_signer")
		]
		public extern static SignerInfo* add1_signer(ContentInfo* cms, X509.x509_st* signer, EVP.PKEY* pk, EVP.MD* md, uint flags);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_get0_pkey_ctx")
		]
		public extern static EVP.PKEY_CTX* SignerInfo_get0_pkey_ctx(SignerInfo* si);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_get0_md_ctx")
		]
		public extern static EVP.MD_CTX* SignerInfo_get0_md_ctx(SignerInfo* si);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get0_SignerInfos")
		]
		public extern static stack_st_CMS_SignerInfo* get0_SignerInfos(ContentInfo* cms);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_set1_signer_cert")
		]
		public extern static void SignerInfo_set1_signer_cert(SignerInfo* si, X509.x509_st* signer);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_get0_signer_id")
		]
		public extern static int SignerInfo_get0_signer_id(SignerInfo* si, ASN1.OCTET_STRING** keyid, X509.NAME** issuer, ASN1.INTEGER** sno);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_cert_cmp")
		]
		public extern static int SignerInfo_cert_cmp(SignerInfo* si, X509.x509_st* cert);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_set1_signers_certs")
		]
		public extern static int set1_signers_certs(ContentInfo* cms, X509.stack_st_X509* certs, uint flags);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_get0_algs")
		]
		public extern static void SignerInfo_get0_algs(SignerInfo* si, EVP.PKEY** pk, X509.x509_st** signer, X509.ALGOR** pdig, X509.ALGOR** psig);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_get0_signature")
		]
		public extern static ASN1.OCTET_STRING* SignerInfo_get0_signature(SignerInfo* si);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_sign")
		]
		public extern static int SignerInfo_sign(SignerInfo* si);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_verify")
		]
		public extern static int SignerInfo_verify(SignerInfo* si);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SignerInfo_verify_content")
		]
		public extern static int SignerInfo_verify_content(SignerInfo* si, BIO.bio_st* chain);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add_smimecap")
		]
		public extern static int add_smimecap(SignerInfo* si, X509.stack_st_X509_ALGOR* algs);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add_simple_smimecap")
		]
		public extern static int add_simple_smimecap(X509.stack_st_X509_ALGOR** algs, int algnid, int keysize);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add_standard_smimecap")
		]
		public extern static int add_standard_smimecap(X509.stack_st_X509_ALGOR** smcap);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_get_attr_count")
		]
		public extern static int signed_get_attr_count(SignerInfo* si);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_get_attr_by_NID")
		]
		public extern static int signed_get_attr_by_NID(SignerInfo* si, int nid, int lastpos);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_get_attr_by_OBJ")
		]
		public extern static int signed_get_attr_by_OBJ(SignerInfo* si, ASN1.OBJECT* obj, int lastpos);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_get_attr")
		]
		public extern static X509.ATTRIBUTE* signed_get_attr(SignerInfo* si, int loc);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_delete_attr")
		]
		public extern static X509.ATTRIBUTE* signed_delete_attr(SignerInfo* si, int loc);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_add1_attr")
		]
		public extern static int signed_add1_attr(SignerInfo* si, X509.ATTRIBUTE *attr);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_add1_attr_by_OBJ")
		]
		public extern static int signed_add1_attr_by_OBJ(SignerInfo* si, ASN1.OBJECT* obj, int type, void* bytes, int len);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_add1_attr_by_NID")
		]
		public extern static int signed_add1_attr_by_NID(SignerInfo* si, int nid, int type, void* bytes, int len);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_add1_attr_by_txt")
		]
		public extern static int signed_add1_attr_by_txt(SignerInfo* si, char8* attrname, int type, void* bytes, int len);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_signed_get0_data_by_OBJ")
		]
		public extern static void* signed_get0_data_by_OBJ(SignerInfo* si, ASN1.OBJECT* oid, int lastpos, int type);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_get_attr_count")
		]
		public extern static int unsigned_get_attr_count(SignerInfo* si);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_get_attr_by_NID")
		]
		public extern static int unsigned_get_attr_by_NID(SignerInfo* si, int nid, int lastpos);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_get_attr_by_OBJ")
		]
		public extern static int unsigned_get_attr_by_OBJ(SignerInfo* si, ASN1.OBJECT* obj, int lastpos);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_get_attr")
		]
		public extern static X509.ATTRIBUTE* unsigned_get_attr(SignerInfo* si, int loc);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_delete_attr")
		]
		public extern static X509.ATTRIBUTE* unsigned_delete_attr(SignerInfo* si, int loc);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_add1_attr")
		]
		public extern static int unsigned_add1_attr(SignerInfo* si, X509.ATTRIBUTE* attr);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_add1_attr_by_OBJ")
		]
		public extern static int unsigned_add1_attr_by_OBJ(SignerInfo* si, ASN1.OBJECT* obj, int type, void* bytes, int len);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_add1_attr_by_NID")
		]
		public extern static int unsigned_add1_attr_by_NID(SignerInfo* si, int nid, int type, void* bytes, int len);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_add1_attr_by_txt")
		]
		public extern static int unsigned_add1_attr_by_txt(SignerInfo* si, char8* attrname, int type, void* bytes, int len);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_unsigned_get0_data_by_OBJ")
		]
		public extern static void* unsigned_get0_data_by_OBJ(SignerInfo* si, ASN1.OBJECT* oid, int lastpos, int type);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_get1_ReceiptRequest")
		]
		public extern static int get1_ReceiptRequest(SignerInfo* si, ReceiptRequest** prr);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_ReceiptRequest_create0")
		]
		public extern static ReceiptRequest* ReceiptRequest_create0(uint8* id, int idlen, int allorfirst, X509v3.stack_st_GENERAL_NAMES* receiptList, X509v3.stack_st_GENERAL_NAMES* receiptsTo);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_add1_ReceiptRequest")
		]
		public extern static int add1_ReceiptRequest(SignerInfo* si, ReceiptRequest* rr);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_ReceiptRequest_get0_values")
		]
		public extern static void ReceiptRequest_get0_values(ReceiptRequest* rr, ASN1.STRING** pcid, int* pallorfirst, X509v3.stack_st_GENERAL_NAMES** plist, X509v3.stack_st_GENERAL_NAMES** prto);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kari_get0_alg")
		]
		public extern static int RecipientInfo_kari_get0_alg(RecipientInfo* ri, X509.ALGOR** palg, ASN1.OCTET_STRING** pukm);

		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kari_get0_reks")
		]
		public extern static stack_st_CMS_RecipientEncryptedKey* RecipientInfo_kari_get0_reks(RecipientInfo* ri);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kari_get0_orig_id")
		]
		public extern static int RecipientInfo_kari_get0_orig_id(RecipientInfo* ri, X509.ALGOR** pubalg, ASN1.BIT_STRING** pubkey, ASN1.OCTET_STRING** keyid, X509.NAME** issuer, ASN1.INTEGER* *sno);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kari_orig_id_cmp")
		]
		public extern static int RecipientInfo_kari_orig_id_cmp(RecipientInfo* ri, X509.x509_st* cert);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientEncryptedKey_get0_id")
		]
		public extern static int RecipientEncryptedKey_get0_id(RecipientEncryptedKey* rek, ASN1.OCTET_STRING** keyid, ASN1.GENERALIZEDTIME** tm, OtherKeyAttribute** other, X509.NAME** issuer, ASN1.INTEGER** sno);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientEncryptedKey_cert_cmp")
		]
		public extern static int RecipientEncryptedKey_cert_cmp(RecipientEncryptedKey* rek, X509.x509_st* cert);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kari_set0_pkey")
		]
		public extern static int RecipientInfo_kari_set0_pkey(RecipientInfo* ri, EVP.PKEY* pk);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kari_get0_ctx")
		]
		public extern static EVP.CIPHER_CTX* RecipientInfo_kari_get0_ctx(RecipientInfo* ri);
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_RecipientInfo_kari_decrypt")
		]
		public extern static int RecipientInfo_kari_decrypt(ContentInfo* cms, RecipientInfo* ri, RecipientEncryptedKey* rek);
		
		[
#if !OPENSSL_LINK_STATIC
			Import(OPENSSL_LIB_CRYPTO),
#endif
			LinkName("CMS_SharedInfo_encode")
		]
		public extern static int SharedInfo_encode(uint8** pder, X509.ALGOR* kekalg, ASN1.OCTET_STRING* ukm, int keylen);
		
		/* Backward compatibility for spelling errors. */
		public const int R_UNKNOWN_DIGEST_ALGORITM       = R_UNKNOWN_DIGEST_ALGORITHM;
		public const int R_UNSUPPORTED_RECPIENTINFO_TYPE = R_UNSUPPORTED_RECIPIENTINFO_TYPE;
#endif
	}
}
